/*
       Example 1:

      Input: nums1 = [1,3], nums2 = [2]
      Output: 2.00000
      Explanation: merged array = [1,2,3] and median is 2.
      Example 2:
      
      Input: nums1 = [1,2], nums2 = [3,4]
      Output: 2.50000
      Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 
*/
//-------------Algorithm---------
-> Firstly merge two arrays into one so for finding the median.
-> sort the merge array so the elements will be in sorted form which will help us to find the median easily
-> If the size of size of the vector found to be even then takes division of two mid elements of the vector,,,,,formula = (vector[size/2-1] + vector[size/2]) / 2.0 
-> if the size of of the vector found to be odd then takes median as the mid of the vector.....   median = vector[size/2].

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        // step 1 : merge the given two vectors
        int m = nums1.size();
        int n = nums2.size();
        int size = m + n;
        
        // let for merging the two arrays into one
        // firstly we gonna do resize nums1 and put the elements of nums2 into nums1

        nums1.resize(size);

        for(int i = 0; i < n; i++)
        {
            nums1[m+i] = nums2[i];
        }

     /*   int sum = 0;
        for(int i : nums1)
        {
              sum += i;
        } */
        sort(nums1.begin(),nums1.end());

        double median = 0;
        if(size % 2 == 0)
        {
           median = ((nums1[size/2 - 1] + nums1[size/2]) / 2.0);
        }
        else if(size % 2 != 0)
        {
            median = nums1[size/2];
        }
        return median;
    }
};
