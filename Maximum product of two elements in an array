

Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).
 

Example 1:

Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 


class Solution {
    public int maxProduct(int[] nums) {
        /* Brute Force approach.
        time complexity = O(n^2)

        int max_pro = Integer.MIN_VALUE;

        for(int i = 0; i < nums.length; i++){
            for(int j = i + 1; j < nums.length; j++){
                if(((nums[i]-1) * (nums[j]-1)) > max_pro){
                    max_pro =  ((nums[i]-1) * (nums[j]-1));
                }
            }
        }
        return max_pro;*/
        // time complexity = n log n

        /*
        Arrays.sort(nums);
        int  x = nums[nums.length-1];
        int y = nums[nums.length-2];

        int res = (x-1) * (y-1);
        return res; */

        // optimal approach
        int biggest = 0, secBiggest = 0;
        for(int num : nums){
            if(num > biggest){
                secBiggest = biggest;
                biggest = num;
            }
            else{
                secBiggest = Math.max(secBiggest,num);
            }
        }
        return (secBiggest-1) * (biggest - 1);
    }
}
